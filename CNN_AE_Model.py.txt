import os
import json
import time
import numpy as np
from skimage import io, img_as_float, transform as sk_transform
import torch
from torch import nn
from torch.utils.data import DataLoader, Dataset
from torchvision import transforms
import torch.optim as optim
from skimage.metrics import peak_signal_noise_ratio as psnr, mean_squared_error, normalized_mutual_information as mutual_info
from skimage.util import random_noise
from scipy.stats import pearsonr
import matplotlib.pyplot as plt


data_dir = "input directory"
output_dir = "output directory"
os.makedirs(output_dir, exist_ok=True)


class DenoisingAutoencoder(nn.Module):
    def __init__(self):
        super(DenoisingAutoencoder, self).__init__()
     
        self.encoder = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1),  # (B, 64, H/2, W/2)
            nn.BatchNorm2d(64),
            nn.ReLU(True),
            nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1),  # (B, 128, H/4, W/4)
            nn.BatchNorm2d(128),
            nn.ReLU(True),
            nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1),  # (B, 256, H/8, W/8)
            nn.BatchNorm2d(256),
            nn.ReLU(True),
        )
       self.decoder = nn.Sequential(
            nn.ConvTranspose2d(256, 128, kernel_size=3, stride=2, padding=1, output_padding=1),  # (B, 128, H/4, W/4)
            nn.BatchNorm2d(128),
            nn.ReLU(True),
            nn.ConvTranspose2d(128, 64, kernel_size=3, stride=2, padding=1, output_padding=1),  # (B, 64, H/2, W/2)
            nn.BatchNorm2d(64),
            nn.ReLU(True),
            nn.ConvTranspose2d(64, 3, kernel_size=3, stride=2, padding=1, output_padding=1),  # (B, 3, H, W)
            nn.Sigmoid()  # to ensure the output values are in [0, 1]
        )

    def forward(self, x):
        x = self.encoder(x)
        x = self.decoder(x)
        return x


model = DenoisingAutoencoder()


class NoisyImageDataset(Dataset):
    def __init__(self, image_dir, transform=None):
        self.image_dir = image_dir
        self.image_files = [f for f in os.listdir(image_dir) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        self.transform = transform
        print(f"Dataset initialized with {len(self.image_files)} samples.")

    def __len__(self):
        return len(self.image_files)

    def __getitem__(self, idx):
        img_name = os.path.join(self.image_dir, self.image_files[idx])
        try:
            clean_image = io.imread(img_name)
            clean_image = img_as_float(clean_image)
            clean_image = sk_transform.resize(clean_image, (256, 256), anti_aliasing=True)

            noisy_image = random_noise(clean_image, mode='gaussian', var=0.01)

            if self.transform:
                clean_image = self.transform(clean_image)
                noisy_image = self.transform(noisy_image)

            return noisy_image, clean_image
        except Exception as e:
            print(f"Error loading image {img_name}: {e}")
            dummy_image = np.zeros((256, 256, 3), dtype=np.float32)
            if self.transform:
                dummy_image = self.transform(dummy_image)
            return dummy_image, dummy_image


batch_size = 4
num_epochs = 50
learning_rate = 1e-3


transform = transforms.Compose([
    transforms.ToTensor(),
])


dataset = NoisyImageDataset(data_dir, transform=transform)
print(f"Number of samples in dataset: {len(dataset)}")
dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)


criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)


train_loss_history = []


for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for noisy_images, clean_images in dataloader:
        noisy_images = noisy_images.float()
        clean_images = clean_images.float()

        # Forward pass
        outputs = model(noisy_images)
        loss = criterion(outputs, clean_images)

        # Backward pass and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        running_loss += loss.item() * noisy_images.size(0)

    epoch_loss = running_loss / len(dataset)
    train_loss_history.append(epoch_loss)
    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {epoch_loss:.4f}')


plt.plot(range(1, num_epochs+1), train_loss_history, label='Training Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training Loss')
plt.legend()
plt.show()


model.eval()
psnr_list = []
rmse_list = []
mutual_info_list = []
correlation_list = []
registration_times = []

for idx in range(len(dataset)):
    start_time = time.time()  # Record start time for registration

    noisy_image, clean_image = dataset[idx]
    noisy_image = noisy_image.unsqueeze(0).float()  # Ensure the tensor is of type float

    with torch.no_grad():
        denoised_image = model(noisy_image)

    denoised_image = denoised_image.squeeze(0).numpy().transpose(1, 2, 0)

    
    denoised_image = denoised_image.transpose(2, 0, 1)


    clean_dtype = clean_image.dtype
    denoised_image = torch.tensor(denoised_image, dtype=clean_dtype)

   
    clean_image_np = clean_image.numpy().transpose(1, 2, 0)  # Convert clean image to NumPy array
    psnr_value = psnr(clean_image_np, denoised_image.numpy().transpose(1, 2, 0))
    rmse_value = mean_squared_error(clean_image_np, denoised_image.numpy().transpose(1, 2, 0))
    mutual_info_value = mutual_info(clean_image_np.flatten(), denoised_image.numpy().transpose(1, 2, 0).flatten())
    correlation_value = pearsonr(clean_image_np.flatten(), denoised_image.numpy().transpose(1, 2, 0).flatten())[0]

 
    if np.isnan(psnr_value) or np.isinf(psnr_value):
        psnr_value = 0
    if np.isnan(rmse_value) or np.isinf(rmse_value):
        rmse_value = 0
    if np.isnan(mutual_info_value) or np.isinf(mutual_info_value):
        mutual_info_value = 0
    if np.isnan(correlation_value) or np.isinf(correlation_value):
        correlation_value = 0

  
    end_time = time.time()
    registration_time = end_time - start_time
    registration_times.append(registration_time)

    psnr_list.append(psnr_value)
    rmse_list.append(rmse_value)
    mutual_info_list.append(mutual_info_value)
    correlation_list.append(correlation_value)

 
    noisy_json_path = os.path.join(output_dir, f"noisy_image_{idx}.json")
    denoised_json_path = os.path.join(output_dir, f"denoised_image_{idx}.json")
    with open(noisy_json_path, 'w') as noisy_file, open(denoised_json_path, 'w') as denoised_file:
        json.dump(noisy_image.tolist(), noisy_file)
        json.dump(denoised_image.numpy().tolist(), denoised_file)

print(f'Average PSNR: {np.mean(psnr_list):.4f}')
print(f'Average RMSE: {np.mean(rmse_list):.4f}')
print(f'Average Mutual Information: {np.mean(mutual_info_list):.4f}')
print(f'Average Correlation Coefficient: {np.mean(correlation_list):.4f}')
print(f'Average Registration Time: {np.mean(registration_times):.4f} seconds')

print("Denoised images saved!")
